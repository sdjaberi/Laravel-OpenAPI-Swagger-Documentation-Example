{
    "openapi": "3.0.0",
    "info": {
        "title": "Water-id Translator Documentation",
        "description": "L5 Swagger OpenApi description",
        "contact": {
            "email": "admin@water-id.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "2.0.0"
    },
    "servers": [
        {
            "url": "http://translator.local/api/v1",
            "description": "Water-id Translator API Server"
        }
    ],
    "paths": {
        "/login": {
            "post": {
                "tags": [
                    "Account"
                ],
                "summary": "Get a JWT via given credentials",
                "description": "Returns bearer string token",
                "operationId": "getJwtToken",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginIn"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Auth"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiRequestException"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiAccessDeniedException"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUnprocessableEntityException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/refreshToken": {
            "post": {
                "tags": [
                    "Account"
                ],
                "summary": "Get a JWT via given credentials by a valid refresh token",
                "description": "Returns bearer string token",
                "operationId": "getJwtToken by a valid refresh token",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RefreshTokenIn"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Auth"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiRequestException"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiAccessDeniedException"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUnprocessableEntityException"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/me": {
            "get": {
                "tags": [
                    "Account"
                ],
                "summary": "Get the logged in user information",
                "description": "Returns user data",
                "operationId": "LogedInUser",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "passport": []
                    }
                ]
            }
        },
        "/logout": {
            "get": {
                "tags": [
                    "Account"
                ],
                "summary": "Get Logout user",
                "description": "Return message",
                "operationId": "LogoutUser",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "passport": []
                    }
                ]
            }
        },
        "/register": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Register new user",
                "description": "Returns user data",
                "operationId": "registerUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterIn"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/categories": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get list of categories",
                "description": "Returns list of categories",
                "operationId": "getCategoriesList",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of item per page",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Column name to sort by",
                        "schema": {
                            "type": "string"
                        },
                        "example": "id"
                    },
                    {
                        "name": "sortDesc",
                        "in": "query",
                        "description": "Column name to sort descending",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        },
                        "example": true
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Search Query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "description": "Category name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "description": "Project name",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUnAuthException"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid scope(s) provided.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiAccessDeniedException"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "passport": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Categories"
                ],
                "summary": "Store new category",
                "description": "Returns category data",
                "operationId": "storeCategory",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreCategoryRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiRequestException"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUnAuthException"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid scope(s) provided.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiAccessDeniedException"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUnprocessableEntityException"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "passport": [
                            "*"
                        ]
                    }
                ]
            }
        },
        "/categories/{id}": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get category information",
                "description": "Returns category data",
                "operationId": "getCategoryById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Category id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiRequestException"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUnAuthException"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid scope(s) provided.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiAccessDeniedException"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiNotFoundException"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "passport": [
                            "*"
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "Categories"
                ],
                "summary": "Update existing category",
                "description": "Returns updated category data",
                "operationId": "updateCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Category id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateCategoryRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiRequestException"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUnAuthException"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid scope(s) provided.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiAccessDeniedException"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiNotFoundException"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "passport": [
                            "*"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Categories"
                ],
                "summary": "Delete existing category",
                "description": "Deletes a record and returns no content",
                "operationId": "deleteCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Category id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUnAuthException"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid scope(s) provided.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiAccessDeniedException"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiNotFoundException"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "passport": [
                            "*"
                        ]
                    }
                ]
            }
        },
        "/phrases": {
            "get": {
                "tags": [
                    "Phrases"
                ],
                "summary": "Get list of phrases",
                "description": "Returns list of phrases",
                "operationId": "getPhrasesList",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of item per page",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 20
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Column name to sort by",
                        "schema": {
                            "type": "string"
                        },
                        "example": "id"
                    },
                    {
                        "name": "sortDesc",
                        "in": "query",
                        "description": "Column name to sort descending",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        },
                        "example": true
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Search Query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "phrase",
                        "in": "query",
                        "description": "Phrase",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "description": "Category name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "phraseCategory",
                        "in": "query",
                        "description": "Phrase category name",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PhraseResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUnAuthException"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid scope(s) provided.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiAccessDeniedException"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "passport": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Phrases"
                ],
                "summary": "Store new phrase",
                "description": "Returns phrase data",
                "operationId": "storePhrase",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StorePhraseRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Phrase"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiRequestException"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUnAuthException"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid scope(s) provided.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiAccessDeniedException"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUnprocessableEntityException"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "passport": [
                            "*"
                        ]
                    }
                ]
            }
        },
        "/phrases/{id}": {
            "get": {
                "tags": [
                    "Phrases"
                ],
                "summary": "Get phrase information",
                "description": "Returns phrase data",
                "operationId": "getPhraseById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Phrase id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Phrase"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiRequestException"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUnAuthException"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid scope(s) provided.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiAccessDeniedException"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiNotFoundException"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "passport": [
                            "*"
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "Phrases"
                ],
                "summary": "Update existing phrase",
                "description": "Returns updated phrase data",
                "operationId": "updatePhrase",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Phrase id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdatePhraseRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Phrase"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiRequestException"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUnAuthException"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid scope(s) provided.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiAccessDeniedException"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiNotFoundException"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "passport": [
                            "*"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Phrases"
                ],
                "summary": "Delete existing phrase",
                "description": "Deletes a record and returns no content",
                "operationId": "deletePhrase",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Phrase id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUnAuthException"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid scope(s) provided.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiAccessDeniedException"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiNotFoundException"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "passport": [
                            "*"
                        ]
                    }
                ]
            }
        },
        "/projects": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Get list of projects",
                "description": "Returns list of projects",
                "operationId": "getProjectsList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUnAuthException"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid scope(s) provided.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiAccessDeniedException"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "passport": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Store new project",
                "description": "Returns project data",
                "operationId": "storeProject",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreProjectRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiRequestException"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUnAuthException"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid scope(s) provided.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiAccessDeniedException"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUnprocessableEntityException"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "passport": [
                            "*"
                        ]
                    }
                ]
            }
        },
        "/projects/{id}": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Get project information",
                "description": "Returns project data",
                "operationId": "getProjectById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiRequestException"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUnAuthException"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid scope(s) provided.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiAccessDeniedException"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiNotFoundException"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "passport": [
                            "*"
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "Projects"
                ],
                "summary": "Update existing project",
                "description": "Returns updated project data",
                "operationId": "updateProject",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateProjectRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiRequestException"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUnAuthException"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid scope(s) provided.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiAccessDeniedException"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiNotFoundException"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "passport": [
                            "*"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Delete existing project",
                "description": "Deletes a record and returns no content",
                "operationId": "deleteProject",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Project id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUnAuthException"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid scope(s) provided.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiAccessDeniedException"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiNotFoundException"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "passport": [
                            "*"
                        ]
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "ApiAccessDeniedException": {
                "properties": {
                    "message": {
                        "description": "The err message",
                        "type": "string",
                        "example": "AccessDenied"
                    }
                },
                "type": "object"
            },
            "ApiNotFoundException": {
                "properties": {
                    "message": {
                        "description": "The err message",
                        "type": "string",
                        "example": "Not Found"
                    }
                },
                "type": "object"
            },
            "ApiPermissionException": {
                "properties": {
                    "message": {
                        "description": "The err message",
                        "type": "string",
                        "example": "NoPermission"
                    }
                },
                "type": "object"
            },
            "ApiRequestException": {
                "properties": {
                    "message": {
                        "description": "The err message",
                        "type": "string",
                        "example": "Bad Request"
                    }
                },
                "type": "object"
            },
            "ApiSystemException": {
                "properties": {
                    "message": {
                        "description": "The err message",
                        "type": "string",
                        "example": "System Error"
                    }
                },
                "type": "object"
            },
            "ApiUnAuthException": {
                "properties": {
                    "message": {
                        "description": "The err message",
                        "type": "string",
                        "example": "Unauthenticated"
                    }
                },
                "type": "object"
            },
            "ApiUnprocessableEntityException": {
                "properties": {
                    "message": {
                        "description": "The err message",
                        "type": "string",
                        "example": "Unprocessable Entity"
                    }
                },
                "type": "object"
            },
            "Auth": {
                "title": "Auth",
                "description": "Auth model",
                "xml": {
                    "name": "Auth"
                }
            },
            "Model": {
                "title": "Model",
                "description": "Model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "string",
                        "format": "int64",
                        "example": 1
                    },
                    "created_at": {
                        "title": "Created at",
                        "description": "Created at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    },
                    "updated_at": {
                        "title": "Updated at",
                        "description": "Updated at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    },
                    "deleted_at": {
                        "title": "Deleted at",
                        "description": "Deleted at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Model"
                }
            },
            "Category": {
                "title": "Category",
                "description": "Category model",
                "xml": {
                    "name": "Category"
                },
                "allOf": [
                    {
                        "properties": {
                            "name": {
                                "title": "Name",
                                "description": "Name",
                                "type": "string",
                                "format": "string",
                                "example": "Notes"
                            },
                            "project_id": {
                                "title": "Project ID",
                                "description": "Project ID",
                                "type": "integer",
                                "format": "int64",
                                "example": 1
                            },
                            "description": {
                                "title": "Description",
                                "description": "Description",
                                "type": "string",
                                "example": "A new description"
                            },
                            "icon": {
                                "title": "Icon",
                                "description": "Icon",
                                "type": "string",
                                "example": "fa fa-explore"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/Model"
                    }
                ]
            },
            "Phrase": {
                "title": "Phrase",
                "description": "Phrase model",
                "xml": {
                    "name": "Phrase"
                },
                "allOf": [
                    {
                        "properties": {
                            "base_id": {
                                "title": "Base ID",
                                "description": "Base ID",
                                "type": "integer",
                                "format": "int64",
                                "example": 1
                            },
                            "phrase": {
                                "title": "Phrase",
                                "description": "Phrase",
                                "type": "string",
                                "example": "A new phrase"
                            },
                            "category_name": {
                                "title": "Category Name",
                                "description": "Category Name",
                                "type": "string",
                                "example": "A category name"
                            },
                            "phrase_category_id": {
                                "title": "Phrase Category ID",
                                "description": "Phrase Category ID",
                                "type": "integer",
                                "format": "int64",
                                "example": 1
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/Model"
                    }
                ]
            },
            "Project": {
                "title": "Project",
                "description": "Project model",
                "xml": {
                    "name": "Project"
                },
                "allOf": [
                    {
                        "properties": {
                            "name": {
                                "title": "Name",
                                "description": "Name of the new project",
                                "type": "string",
                                "example": "A nice project"
                            },
                            "description": {
                                "title": "Description",
                                "description": "Description of the new project",
                                "type": "string",
                                "example": "This is new project's description"
                            },
                            "author_id": {
                                "title": "Author ID",
                                "description": "Author's id of the new project",
                                "type": "integer",
                                "format": "int64",
                                "example": 1
                            },
                            "author": {
                                "title": "Author",
                                "description": "Project author's user model"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/Model"
                    }
                ]
            },
            "User": {
                "title": "User",
                "description": "User model",
                "allOf": [
                    {
                        "properties": {
                            "name": {
                                "title": "Name",
                                "description": "Name",
                                "type": "string"
                            },
                            "email": {
                                "title": "Email",
                                "description": "Email",
                                "type": "string",
                                "format": "email"
                            },
                            "email_verified_at": {
                                "title": "Email verified at",
                                "description": "Email verified at",
                                "type": "string",
                                "format": "datetime",
                                "example": "2020-01-27 17:50:45"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/Model"
                    }
                ]
            },
            "StoreCategoryRequest": {
                "title": "Store Category request",
                "description": "Store Category request body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "title": "Name",
                        "description": "Name",
                        "type": "string",
                        "example": "A new category name"
                    },
                    "project_id": {
                        "title": "Project ID",
                        "description": "Project ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "description": {
                        "title": "Description",
                        "description": "Description",
                        "type": "string",
                        "example": "A category description"
                    },
                    "icon": {
                        "title": "Icon",
                        "description": "Icon",
                        "type": "string",
                        "example": "fa fa-user"
                    }
                },
                "type": "object"
            },
            "StorePhraseRequest": {
                "title": "Store Phrase request",
                "description": "Store Phrase request body data",
                "required": [
                    "phrase"
                ],
                "properties": {
                    "base_id": {
                        "title": "Base ID",
                        "description": "Base ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "phrase": {
                        "title": "Phrase",
                        "description": "Phrase",
                        "type": "string",
                        "example": "A new phrase"
                    },
                    "category_name": {
                        "title": "Category Name",
                        "description": "Category Name",
                        "type": "string",
                        "example": "A category name"
                    },
                    "phrase_category_id": {
                        "title": "Phrase Category ID",
                        "description": "Phrase Category ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    }
                },
                "type": "object"
            },
            "StoreProjectRequest": {
                "title": "Store Project request",
                "description": "Store Project request body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "title": "name",
                        "description": "Name of the new project",
                        "type": "string",
                        "example": "A nice project"
                    },
                    "description": {
                        "title": "description",
                        "description": "Description of the new project",
                        "type": "string",
                        "example": "This is new project's description"
                    },
                    "author_id": {
                        "title": "author_id",
                        "description": "Author's id of the new project",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "languages": {
                        "title": "languages",
                        "description": "Language's ids of the new project",
                        "type": "array[int64]",
                        "example": "[1,2]"
                    }
                },
                "type": "object"
            },
            "UpdateCategoryRequest": {
                "title": "Update category request",
                "description": "Update category request body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "title": "Name",
                        "description": "Name",
                        "type": "string",
                        "example": "A new category name"
                    },
                    "project_id": {
                        "title": "Project ID",
                        "description": "Project ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "description": {
                        "title": "Description",
                        "description": "Description",
                        "type": "string",
                        "example": "A category description"
                    },
                    "icon": {
                        "title": "Icon",
                        "description": "Icon",
                        "type": "string",
                        "example": "fa fa-user"
                    }
                },
                "type": "object"
            },
            "UpdatePhraseRequest": {
                "title": "Update Phrase request",
                "description": "Update Phrase request body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "base_id": {
                        "title": "Base ID",
                        "description": "Base ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "phrase": {
                        "title": "Phrase",
                        "description": "Phrase",
                        "type": "string",
                        "example": "A new phrase"
                    },
                    "category_name": {
                        "title": "Category Name",
                        "description": "Category Name",
                        "type": "string",
                        "example": "A category name"
                    },
                    "phrase_category_id": {
                        "title": "Phrase Category ID",
                        "description": "Phrase Category ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    }
                },
                "type": "object"
            },
            "UpdateProjectRequest": {
                "title": "Update Project request",
                "description": "Update Project request body data",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "title": "name",
                        "description": "Name of the new project",
                        "type": "string",
                        "example": "A nice project"
                    },
                    "description": {
                        "title": "description",
                        "description": "Description of the new project",
                        "type": "string",
                        "example": "This is new project's description"
                    },
                    "author_id": {
                        "title": "author_id",
                        "description": "Author's id of the new project",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "languages": {
                        "title": "languages",
                        "description": "Language's ids of the new project",
                        "type": "array[int64]",
                        "example": "[1,2]"
                    }
                },
                "type": "object"
            },
            "AuthResource": {
                "title": "AuthResource",
                "description": "Auth resource",
                "properties": {
                    "data": {
                        "title": "Data",
                        "description": "Data wrapper",
                        "type": "array",
                        "items": {
                            "ref": null
                        }
                    }
                },
                "type": "object",
                "xml": {
                    "name": "AuthResource"
                }
            },
            "CategoryResource": {
                "title": "CategoryResource",
                "description": "Category resource",
                "properties": {
                    "data": {
                        "title": "Data",
                        "description": "Data wrapper",
                        "type": "array",
                        "items": {
                            "ref": null
                        }
                    }
                },
                "type": "object",
                "xml": {
                    "name": "CategoryResource"
                }
            },
            "PhraseResource": {
                "title": "PhraseResource",
                "description": "Phrase resource",
                "properties": {
                    "data": {
                        "title": "Data",
                        "description": "Data wrapper",
                        "type": "array",
                        "items": {
                            "ref": null
                        }
                    }
                },
                "type": "object",
                "xml": {
                    "name": "PhraseResource"
                }
            },
            "ProjectResource": {
                "title": "ProjectResource",
                "description": "Project resource",
                "properties": {
                    "data": {
                        "title": "Data",
                        "description": "Data wrapper",
                        "type": "array",
                        "items": {
                            "ref": null
                        }
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ProjectResource"
                }
            },
            "CategoryFilter": {
                "title": "CategoryFilter",
                "description": "CategoryFilter model",
                "properties": {
                    "q": {
                        "title": "SearchQuery",
                        "description": "A Search Query",
                        "type": "string",
                        "example": "search query"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "CategoryFilter"
                }
            },
            "CategoryOut": {
                "title": "CategoryOut",
                "description": "CategoryOut model",
                "properties": {
                    "name": {
                        "title": "Name",
                        "description": "Name",
                        "type": "string",
                        "format": "string",
                        "example": "Notes"
                    },
                    "project_id": {
                        "title": "Project ID",
                        "description": "Project ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "description": {
                        "title": "Description",
                        "description": "Description",
                        "type": "string",
                        "example": "A new description"
                    },
                    "icon": {
                        "title": "Icon",
                        "description": "Icon",
                        "type": "string",
                        "example": "fa fa-explore"
                    },
                    "project": {
                        "$ref": "#/components/schemas/ProjectOut"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "CategoryOut"
                }
            },
            "CategoryPageableFilter": {
                "title": "CategoryPageableFilter",
                "description": "CategoryPageableFilter model",
                "properties": {
                    "page": {
                        "title": "Page",
                        "description": "Page",
                        "type": "integer",
                        "example": "2"
                    },
                    "perPage": {
                        "title": "PerPage",
                        "description": "PerPage",
                        "type": "integer",
                        "example": "100"
                    },
                    "sortBy": {
                        "title": "SortBY",
                        "description": "SortBy",
                        "type": "string",
                        "example": "id"
                    },
                    "sortDesc": {
                        "title": "SortDesc",
                        "description": "SortDesc",
                        "type": "boolean",
                        "example": "true"
                    },
                    "q": {
                        "title": "SearchQuery",
                        "description": "A Search Query",
                        "type": "string",
                        "example": "search query"
                    },
                    "category": {
                        "title": "Category",
                        "description": "Category",
                        "type": "string",
                        "example": "Website"
                    },
                    "project": {
                        "title": "PhraseCategory",
                        "description": "PhraseCategory",
                        "type": "string",
                        "example": "Setting"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "CategoryPageableFilter"
                }
            },
            "LoginIn": {
                "title": "LoginIn",
                "description": "LoginIn model",
                "properties": {
                    "email": {
                        "title": "Email",
                        "description": "Email",
                        "type": "string",
                        "example": "admin@admin.admin"
                    },
                    "password": {
                        "title": "Password",
                        "description": "Password",
                        "type": "string",
                        "example": "password"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "LoginIn"
                }
            },
            "LoginOut": {
                "title": "LoginOut",
                "description": "LoginOut model",
                "properties": {
                    "accessToken": {
                        "title": "Token",
                        "description": "A JWT token",
                        "type": "string"
                    },
                    "refreshToken": {
                        "title": "Refresh Token",
                        "description": "A JWT refresh token",
                        "type": "string"
                    },
                    "expires_in": {
                        "title": "Expires At",
                        "description": "Expires At",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    },
                    "token_type": {
                        "title": "Token Type",
                        "description": "Token Type",
                        "type": "string",
                        "example": "Bearer"
                    },
                    "userData": {
                        "title": "User Data",
                        "description": "User Data"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "LoginOut"
                }
            },
            "RefreshTokenIn": {
                "title": "RefreshTokenIn",
                "description": "RefreshTokenIn model",
                "properties": {
                    "refreshToken": {
                        "title": "Refresh Token",
                        "description": "A JWT refresh token",
                        "type": "string"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "RefreshTokenIn"
                }
            },
            "RefreshTokenOut": {
                "title": "RefreshTokenOut",
                "description": "RefreshTokenOut model",
                "properties": {
                    "accessToken": {
                        "title": "Token",
                        "description": "A JWT token",
                        "type": "string"
                    },
                    "refreshToken": {
                        "title": "Refresh Token",
                        "description": "A JWT refresh token",
                        "type": "string"
                    },
                    "expires_in": {
                        "title": "Expires At",
                        "description": "Expires At",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    },
                    "token_type": {
                        "title": "Token Type",
                        "description": "Token Type",
                        "type": "string",
                        "example": "Bearer"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "RefreshTokenOut"
                }
            },
            "RegisterIn": {
                "title": "RegisterIn",
                "description": "RegisterIn model",
                "properties": {
                    "name": {
                        "title": "Name",
                        "description": "Name",
                        "type": "string",
                        "example": "john legend"
                    },
                    "email": {
                        "title": "Email",
                        "description": "Email",
                        "type": "string",
                        "example": "example@example.com"
                    },
                    "password": {
                        "title": "Password",
                        "description": "Password",
                        "type": "string",
                        "example": "j#dH5iJ3@"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "RegisterIn"
                }
            },
            "PhraseFilter": {
                "title": "PhraseFilter",
                "description": "PhraseFilter model",
                "properties": {
                    "q": {
                        "title": "SearchQuery",
                        "description": "A Search Query",
                        "type": "string",
                        "example": "search query"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "PhraseFilter"
                }
            },
            "PhraseOut": {
                "title": "PhraseOut",
                "description": "PhraseOut model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "base_id": {
                        "title": "Base ID",
                        "description": "Base ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "phrase": {
                        "title": "Phrase",
                        "description": "Phrase",
                        "type": "string",
                        "example": "A new phrase"
                    },
                    "category_name": {
                        "title": "Category Name",
                        "description": "Category Name",
                        "type": "string",
                        "example": "A category name"
                    },
                    "phrase_category_id": {
                        "title": "Phrase Category ID",
                        "description": "Phrase Category ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "translations_count": {
                        "title": "Translations Count",
                        "description": "Translations Count",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "created_at": {
                        "title": "Created at",
                        "description": "Created at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    },
                    "updated_at": {
                        "title": "Updated at",
                        "description": "Updated at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    },
                    "deleted_at": {
                        "title": "Deleted at",
                        "description": "Deleted at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    },
                    "phraseCategory": {
                        "$ref": "#/components/schemas/PhraseCategoryOut"
                    },
                    "category": {
                        "$ref": "#/components/schemas/CategoryOut"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "PhraseOut"
                }
            },
            "PhrasePageableFilter": {
                "title": "PhrasePageableFilter",
                "description": "PhrasePageableFilter model",
                "properties": {
                    "page": {
                        "title": "Page",
                        "description": "Page",
                        "type": "integer",
                        "example": "2"
                    },
                    "perPage": {
                        "title": "PerPage",
                        "description": "PerPage",
                        "type": "integer",
                        "example": "100"
                    },
                    "sortBy": {
                        "title": "SortBY",
                        "description": "SortBy",
                        "type": "string",
                        "example": "id"
                    },
                    "sortDesc": {
                        "title": "SortDesc",
                        "description": "SortDesc",
                        "type": "boolean",
                        "example": "true"
                    },
                    "q": {
                        "title": "SearchQuery",
                        "description": "A Search Query",
                        "type": "string",
                        "example": "search query"
                    },
                    "phrase": {
                        "title": "Phrase",
                        "description": "Phrase",
                        "type": "string",
                        "example": "Homepage"
                    },
                    "category": {
                        "title": "Category",
                        "description": "Category",
                        "type": "string",
                        "example": "Website"
                    },
                    "phraseCategory": {
                        "title": "PhraseCategory",
                        "description": "PhraseCategory",
                        "type": "string",
                        "example": "Setting"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "PhrasePageableFilter"
                }
            },
            "PhraseCategoryFilter": {
                "title": "PhraseCategoryFilter",
                "description": "PhraseCategoryFilter model",
                "properties": {
                    "page": {
                        "title": "Page",
                        "description": "Page",
                        "type": "integer",
                        "example": "2"
                    },
                    "perPage": {
                        "title": "PerPage",
                        "description": "PerPage",
                        "type": "integer",
                        "example": "100"
                    },
                    "sortBy": {
                        "title": "SortBY",
                        "description": "SortBy",
                        "type": "string",
                        "example": "id"
                    },
                    "sortDesc": {
                        "title": "SortDesc",
                        "description": "SortDesc",
                        "type": "boolean",
                        "example": "true"
                    },
                    "q": {
                        "title": "SearchQuery",
                        "description": "A Search Query",
                        "type": "string",
                        "example": "search query"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "PhraseCategoryFilter"
                }
            },
            "PhraseCategoryOut": {
                "title": "PhraseCategoryOut",
                "description": "PhraseCategoryOut model",
                "properties": {
                    "name": {
                        "title": "Name",
                        "description": "Name",
                        "type": "string",
                        "format": "string",
                        "example": "Notes"
                    },
                    "": {
                        "title": "File Name",
                        "description": "File Name",
                        "type": "integer",
                        "format": "string",
                        "example": "[{'@attributes':{'filename':'..\\/flux\\/views\\/settings\\/dataschemes\\/AccountScheme.qml','line':'26'}}]"
                    },
                    "created_at": {
                        "title": "Created at",
                        "description": "Created at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    },
                    "updated_at": {
                        "title": "Updated at",
                        "description": "Updated at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    },
                    "deleted_at": {
                        "title": "Deleted at",
                        "description": "Deleted at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "PhraseCategoryOut"
                }
            },
            "PhraseCategoryPageableFilter": {
                "title": "PhraseCategoryPageableFilter",
                "description": "PhraseCategoryPageableFilter model",
                "xml": {
                    "name": "PhraseCategoryPageableFilter"
                },
                "allOf": [
                    {
                        "properties": {
                            "page": {
                                "title": "Page",
                                "description": "Page",
                                "type": "integer",
                                "example": "2"
                            },
                            "perPage": {
                                "title": "PerPage",
                                "description": "PerPage",
                                "type": "integer",
                                "example": "100"
                            },
                            "sortBy": {
                                "title": "SortBY",
                                "description": "SortBy",
                                "type": "string",
                                "example": "id"
                            },
                            "sortDesc": {
                                "title": "SortDesc",
                                "description": "SortDesc",
                                "type": "boolean",
                                "example": "true"
                            },
                            "phrase": {
                                "title": "Phrase",
                                "description": "Phrase",
                                "type": "string",
                                "example": "Homepage"
                            },
                            "category": {
                                "title": "Category",
                                "description": "Category",
                                "type": "string",
                                "example": "Website"
                            },
                            "phraseCategory": {
                                "title": "PhraseCategory",
                                "description": "PhraseCategory",
                                "type": "string",
                                "example": "Setting"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/PhraseCategoryFilter"
                    }
                ]
            },
            "ProjectFilter": {
                "title": "ProjectFilter",
                "description": "Project Filter model",
                "properties": {
                    "page": {
                        "title": "Page",
                        "description": "Page",
                        "type": "integer",
                        "example": "2"
                    },
                    "perPage": {
                        "title": "PerPage",
                        "description": "PerPage",
                        "type": "integer",
                        "example": "100"
                    },
                    "sortBy": {
                        "title": "SortBY",
                        "description": "SortBy",
                        "type": "string",
                        "example": "id"
                    },
                    "sortDesc": {
                        "title": "SortDesc",
                        "description": "SortDesc",
                        "type": "boolean",
                        "example": "true"
                    },
                    "q": {
                        "title": "SearchQuery",
                        "description": "A Search Query",
                        "type": "string",
                        "example": "search query"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ProjectFilter"
                }
            },
            "ProjectOut": {
                "title": "ProjectOut",
                "description": "ProjectOut model",
                "properties": {
                    "name": {
                        "title": "Name",
                        "description": "Name",
                        "type": "string",
                        "format": "string",
                        "example": "Notes"
                    },
                    "project_id": {
                        "title": "Project ID",
                        "description": "Project ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "description": {
                        "title": "Description",
                        "description": "Description",
                        "type": "string",
                        "example": "A new description"
                    },
                    "created_at": {
                        "title": "Created at",
                        "description": "Created at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    },
                    "updated_at": {
                        "title": "Updated at",
                        "description": "Updated at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    },
                    "deleted_at": {
                        "title": "Deleted at",
                        "description": "Deleted at",
                        "type": "string",
                        "format": "datetime",
                        "example": "2020-01-27 17:50:45"
                    },
                    "author_id": {
                        "title": "Author ID",
                        "description": "Author ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "author": {
                        "title": "Author",
                        "description": "Author Model"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ProjectOut"
                }
            },
            "ProjectPageableFilter": {
                "title": "ProjectPageableFilter",
                "description": "Project Pageable Filter model",
                "xml": {
                    "name": "ProjectPageableFilter"
                },
                "allOf": [
                    {
                        "properties": {
                            "page": {
                                "title": "Page",
                                "description": "Page",
                                "type": "integer",
                                "example": "2"
                            },
                            "perPage": {
                                "title": "PerPage",
                                "description": "PerPage",
                                "type": "integer",
                                "example": "100"
                            },
                            "sortBy": {
                                "title": "SortBY",
                                "description": "SortBy",
                                "type": "string",
                                "example": "id"
                            },
                            "sortDesc": {
                                "title": "SortDesc",
                                "description": "SortDesc",
                                "type": "boolean",
                                "example": "true"
                            },
                            "phrase": {
                                "title": "Phrase",
                                "description": "Phrase",
                                "type": "string",
                                "example": "Homepage"
                            },
                            "category": {
                                "title": "Category",
                                "description": "Category",
                                "type": "string",
                                "example": "Website"
                            },
                            "phraseCategory": {
                                "title": "PhraseCategory",
                                "description": "PhraseCategory",
                                "type": "string",
                                "example": "Setting"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/ProjectFilter"
                    }
                ]
            }
        },
        "securitySchemes": {
            "passport": {
                "type": "apiKey",
                "description": "Enter \"Bearer + [space] + [token]\" in the text input below(Value).",
                "example": "Bearer 1qaz2wsx3edc",
                "in": "header",
                "name": "Authorization"
            }
        }
    },
    "tags": [
        {
            "name": "Account",
            "description": "API Endpoints of Authorization Actions"
        },
        {
            "name": "Projects",
            "description": "API Endpoints of Projects"
        },
        {
            "name": "Phrases",
            "description": "API Endpoints of Phrases"
        }
    ]
}